@page "/HttpStatusCodes"
@rendermode InteractiveServer
@using BlazorWebApp1.APIs
@inject PublicApisService publicApisService

<PageTitle>Http Status Codes</PageTitle>

<MudContainer Class="d-flex flex-column gap-4 pt-8">

    <h3>Http Status Codes</h3>

    <div>
        <span>Fetches http status codes from </span>
    </div>
    <MudNumericField Label="How many status codes should we load?" @bind-Value="numberOfStatusCodes"></MudNumericField>

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await GetStatusCodeImage(numberOfStatusCodes))">Load Status Codes</MudButton>

    @if (loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle"></MudSkeleton>
    }
    else if (string.IsNullOrEmpty(imageSrc))
    {
        <p>No image to display</p>
    }
    else
    {
        <MudCard>
            @* <MudCardMedia Image="@imageSrc" Height="400" Style="object-fit:contain;max-width: 100%; height: auto" /> *@

            <MudImage Src="@imageSrc" ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center" Style="width: 100%; height:auto; max-height: 400px" />
            <MudCardContent>
                <MudText Typo="Typo.h6">Status Code: @(numberOfStatusCodes)</MudText>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>


@code {
    int numberOfStatusCodes = 200;
    string imageSrc = string.Empty;
    bool loading = false;

    async Task GetStatusCodeImage(int statusCode)
    {
        loading = true;
        var response = await publicApisService.GetStatusCodeImage(statusCode);
        if (response != null)
        {
            var imageBase64 = Convert.ToBase64String(response);
            imageSrc = $"data:image/png;base64,{imageBase64}";
        }
        loading = false;
    }
}
